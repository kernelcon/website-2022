{"ast":null,"code":"var _jsxFileName = \"/home/app/src/pages/Agenda/TalksSchedule.js\";\nimport React, { Component } from 'react';\nimport Modal from '../../components/Modal/Modal';\nimport './TalksSchedule.scss';\nimport config from 'agendaConfig';\nexport default class TalksSchedule extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleScheduleDate = index => {\n      this.setState({\n        dayIndex: index,\n        showTabNum: index\n      });\n    };\n\n    this.popModal = (title, description) => e => {\n      this.setState({\n        modal: {\n          title: title,\n          description: description\n        }\n      });\n      this.toggleModal();\n    };\n\n    this.toggleModal = () => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n\n    this.state = {\n      isOpen: false,\n      dayIndex: 0,\n      showTabNum: 0,\n      modal: {\n        title: '',\n        description: ''\n      }\n    };\n  }\n\n  render() {\n    const currentDay = config[this.state.dayIndex];\n    const dayOfWeek = currentDay.dayOfWeek;\n    const scheduleTabs = config.map((ele, index) => {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"radio\",\n        onChange: () => {\n          this.toggleScheduleDate(index);\n        },\n        name: \"schedule-tabs\",\n        id: \"tab\".concat(index),\n        checked: index === this.state.showTabNum ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"tab\".concat(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, ele.dayOfWeek, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, ele.date)));\n    });\n    const tabsHeader = React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n      className: \"tabs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, scheduleTabs), React.createElement(\"div\", {\n      className: \"schedule-heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Tentative \".concat(dayOfWeek, \" Speaking Schedule\")), React.createElement(\"div\", {\n      className: \"tz-note\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Note: All times listed are in Central Time.\"));\n    const trackHeaders = currentDay.roomsInfo.map((ele, index) => {\n      return React.createElement(\"div\", {\n        className: \"track\",\n        style: {\n          gridColumn: index + 1,\n          gridRow: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, ele.roomName);\n    });\n    let rows = 2;\n    const totalCols = currentDay.roomsInfo.length;\n    const talksGrid = currentDay.talks.map((ele, index) => {\n      const gridColumnStart = ele.roomIndex[0] + 1;\n      const gridColumnEnd = ele.roomIndex[ele.roomIndex.length - 1] + 2;\n      const gridColumn = \"\".concat(gridColumnStart, \" / \").concat(gridColumnEnd);\n      const gridRow = ele.minutes >= 42 ? \"\".concat(rows, \" / \").concat(rows + 2) : \"\".concat(rows);\n\n      if (gridColumnEnd - 1 >= totalCols && ele.minutes < 42) {\n        rows++;\n      } else if (gridColumnEnd - 1 >= totalCols && ele.minutes >= 42) {\n        rows += 2;\n      }\n\n      return React.createElement(\"a\", {\n        style: {\n          gridColumn: gridColumn,\n          gridRow: gridRow\n        },\n        onClick: this.popModal(ele.talkTitle, ele.talkDescription),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"talk-time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, ele.time), React.createElement(\"span\", {\n        className: \"truncate-overflow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, ele.talkTitle)));\n    });\n    let gridTemplateRows = \"42px \".repeat(rows - 1);\n    const gridTemplateColumnsPercentage = (100 / totalCols).toFixed(1);\n    const gridTemplateColumnsString = \"calc(\".concat(gridTemplateColumnsPercentage, \"% - 10px) \");\n    const gridTemplateColumns = \"\".concat(gridTemplateColumnsString.repeat(totalCols));\n    return React.createElement(\"div\", {\n      className: \"schedule-talks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      show: this.state.isOpen,\n      onClose: this.toggleModal,\n      title: this.state.modal.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.state.modal.description))), tabsHeader, React.createElement(\"div\", {\n      className: \"grid-wrapper\",\n      style: {\n        gridTemplateColumns: gridTemplateColumns,\n        gridTemplateRows: gridTemplateRows\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, trackHeaders, talksGrid));\n  }\n\n}\nTalksSchedule.displayName = 'TalksSchedule';","map":{"version":3,"sources":["/home/app/src/pages/Agenda/TalksSchedule.js"],"names":["React","Component","Modal","config","TalksSchedule","constructor","props","toggleScheduleDate","index","setState","dayIndex","showTabNum","popModal","title","description","e","modal","toggleModal","isOpen","state","render","currentDay","dayOfWeek","scheduleTabs","map","ele","date","tabsHeader","trackHeaders","roomsInfo","gridColumn","gridRow","roomName","rows","totalCols","length","talksGrid","talks","gridColumnStart","roomIndex","gridColumnEnd","minutes","talkTitle","talkDescription","time","gridTemplateRows","repeat","gridTemplateColumnsPercentage","toFixed","gridTemplateColumnsString","gridTemplateColumns","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Modal from '../../components/Modal/Modal';\nimport './TalksSchedule.scss';\n\nimport config from 'agendaConfig';\n\n\nexport default class TalksSchedule extends Component {\n  static displayName = 'TalksSchedule';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      dayIndex: 0,\n      showTabNum: 0,\n      modal: {\n        title: '',\n        description: '',\n      }\n    };\n  }\n\n  toggleScheduleDate = (index) => {\n    this.setState({\n      dayIndex: index,\n      showTabNum: index\n    });\n  };\n\n  popModal = (title, description) => e => {\n    this.setState({\n      modal:{\n        title: title,\n        description: description,\n      }\n    });\n    this.toggleModal();\n  }\n\n  toggleModal = () => {\n    this.setState({\n      isOpen: !this.state.isOpen,\n    });\n  }\n\n  render() {\n    const currentDay = config[this.state.dayIndex];\n    const dayOfWeek = currentDay.dayOfWeek;\n\n    const scheduleTabs = config.map((ele, index) => {\n      return (\n        <li>\n          <input type='radio'\n            onChange={() => {this.toggleScheduleDate(index)}}\n            name='schedule-tabs'\n            id={`tab${index}`}\n            checked={index === this.state.showTabNum ? true : false} />\n            <label htmlFor={`tab${index}`}>{ele.dayOfWeek}<span>{ele.date}</span></label>\n        </li>\n      );\n    });\n\n    const tabsHeader = (\n      <>\n        <ul className='tabs'>\n          {scheduleTabs}\n        </ul>\n        <div className='schedule-heading'>{`Tentative ${dayOfWeek} Speaking Schedule`}</div>\n        <div className='tz-note'>Note: All times listed are in Central Time.</div>\n      </>\n    );\n\n\n    const trackHeaders = currentDay.roomsInfo.map((ele, index) => {\n      return (\n        <div className='track' style={{gridColumn: index+1, gridRow: 1}}>{ele.roomName}</div>\n      );\n    });\n\n    let rows = 2;\n    const totalCols = currentDay.roomsInfo.length;\n    const talksGrid = currentDay.talks.map((ele, index) => {\n      const gridColumnStart = ele.roomIndex[0] + 1;\n      const gridColumnEnd = ele.roomIndex[ele.roomIndex.length - 1] + 2;\n      const gridColumn = `${gridColumnStart} / ${gridColumnEnd}`;\n\n      const gridRow = ele.minutes >= 42 ? `${rows} / ${rows + 2}` : `${rows}`; \n\n      if (gridColumnEnd - 1 >= totalCols && ele.minutes < 42) {\n        rows++;\n      } else if (gridColumnEnd - 1 >= totalCols && ele.minutes >= 42) {\n        rows+= 2;\n      }\n      \n      return (\n        <a style={{gridColumn: gridColumn, gridRow: gridRow}}\n          onClick={this.popModal(ele.talkTitle, ele.talkDescription)}>\n          <div className='box'>\n            <span className='talk-time'>{ele.time}</span>\n            <span className='truncate-overflow'>{ele.talkTitle}</span>\n          </div>\n        </a>\n      );\n    });\n\n    let gridTemplateRows = `42px `.repeat(rows - 1);\n\n    const gridTemplateColumnsPercentage = (100 / totalCols).toFixed(1);\n    const gridTemplateColumnsString = `calc(${gridTemplateColumnsPercentage}% - 10px) `;\n    const gridTemplateColumns = `${gridTemplateColumnsString.repeat(totalCols)}`;\n    \n    return (\n      <div className='schedule-talks'>\n\n        <Modal show={this.state.isOpen}\n          onClose={this.toggleModal}\n          title={this.state.modal.title}\n        >\n          <div className='modal-content'>\n            <div className='modal-description'>\n              {this.state.modal.description}\n            </div>\n          </div>         \n        </Modal>\n\n\n\n\n\n        {tabsHeader}\n        <div className={`grid-wrapper`}\n          style={{gridTemplateColumns: gridTemplateColumns, gridTemplateRows: gridTemplateRows}}>\n          {trackHeaders}\n          {talksGrid}\n\n        </div>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}