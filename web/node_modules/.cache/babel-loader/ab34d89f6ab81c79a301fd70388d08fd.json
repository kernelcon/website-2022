{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar TabSelection = function () {\n  function TabSelection() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        defaultTab = _ref.defaultTab,\n        _ref$vertical = _ref.vertical,\n        vertical = _ref$vertical === undefined ? false : _ref$vertical,\n        _ref$collapsible = _ref.collapsible,\n        collapsible = _ref$collapsible === undefined ? false : _ref$collapsible,\n        onChange = _ref.onChange;\n\n    _classCallCheck(this, TabSelection);\n\n    this.selected = defaultTab;\n    this.tabs = [];\n    this.subscribtions = [];\n    this.onChange = onChange;\n    this.vertical = vertical;\n    this.collapsible = collapsible;\n  }\n\n  _createClass(TabSelection, [{\n    key: \"select\",\n    value: function select(tabId) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$focus = _ref2.focus,\n          focus = _ref2$focus === undefined ? false : _ref2$focus;\n\n      if (!this.tabs.includes(tabId) || !this.collapsible && this.isSelected(tabId)) {\n        return;\n      }\n\n      if (this.isSelected(tabId)) {\n        this.selected = undefined;\n      } else {\n        this.selected = tabId;\n      }\n\n      this.subscribtions.forEach(function (callback) {\n        return callback({\n          focus: focus\n        });\n      });\n\n      if (this.onChange) {\n        this.onChange(tabId);\n      }\n    }\n  }, {\n    key: \"selectPrevious\",\n    value: function selectPrevious(options) {\n      var prevIndex = this.tabs.indexOf(this.selected) - 1;\n      this.select(this.tabs[prevIndex >= 0 ? prevIndex : this.tabs.length - 1], options);\n    }\n  }, {\n    key: \"selectNext\",\n    value: function selectNext(options) {\n      var nextIndex = (this.tabs.indexOf(this.selected) + 1) % this.tabs.length;\n      this.select(this.tabs[nextIndex], options);\n    }\n  }, {\n    key: \"selectFirst\",\n    value: function selectFirst(options) {\n      this.select(this.tabs[0], options);\n    }\n  }, {\n    key: \"selectLast\",\n    value: function selectLast(options) {\n      this.select(this.tabs[this.tabs.length - 1], options);\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(tabId) {\n      return tabId === this.selected;\n    }\n  }, {\n    key: \"isVertical\",\n    value: function isVertical() {\n      return this.vertical;\n    }\n  }, {\n    key: \"register\",\n    value: function register(tabId) {\n      if (this.tabs.includes(tabId)) {\n        return;\n      }\n\n      this.tabs.push(tabId); // set the first registered tab as select if no tab was assigned as default\n\n      if (!this.selected) {\n        this.select(tabId);\n      }\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister(tabId) {\n      this.tabs = this.tabs.filter(function (id) {\n        return id !== tabId;\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      this.subscribtions.push(callback);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(callback) {\n      this.subscribtions = this.subscribtions.filter(function (cb) {\n        return cb !== callback;\n      });\n    }\n  }]);\n\n  return TabSelection;\n}();\n\nexport default TabSelection;","map":null,"metadata":{},"sourceType":"module"}