{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TabPanelComponent from './TabPanelComponent';\nimport withTabSelection from './withTabSelection';\n/* eslint-disable no-nested-ternary */\n\nvar TabPanel = function (_Component) {\n  _inherits(TabPanel, _Component);\n\n  function TabPanel(props) {\n    _classCallCheck(this, TabPanel);\n\n    var _this = _possibleConstructorReturn(this, (TabPanel.__proto__ || Object.getPrototypeOf(TabPanel)).call(this, props));\n\n    _this.update = _this.update.bind(_this);\n    return _this;\n  }\n\n  _createClass(TabPanel, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.props.selection.subscribe(this.update);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.props.selection.unsubscribe(this.update);\n    }\n  }, {\n    key: 'update',\n    value: function update() {\n      this.forceUpdate();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          tabId = _props.tabId,\n          props = _objectWithoutProperties(_props, ['tabId']);\n\n      var selected = this.props.selection.isSelected(tabId);\n      return React.createElement(TabPanelComponent, _extends({\n        tabId: tabId,\n        selected: selected\n      }, props));\n    }\n  }]);\n\n  return TabPanel;\n}(Component);\n\nTabPanel.propTypes = {\n  selection: PropTypes.shape({\n    subscribe: PropTypes.func.isRequired,\n    unsubscribe: PropTypes.func.isRequired,\n    isSelected: PropTypes.func.isRequired\n  }).isRequired,\n  tabId: PropTypes.string.isRequired\n};\nexport default withTabSelection(TabPanel);","map":null,"metadata":{},"sourceType":"module"}